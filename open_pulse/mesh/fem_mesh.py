from .unv_reader import UnvReader

from os.path import abspath
from tempfile import mkdtemp
from platform import system 
from subprocess import call, PIPE

class FemMesh:
    def __init__(self, file_path, min_len=0, max_len='1e+06'):
        self.edges = dict()
        self.vertices = dict()
        self.edges_matrix = []
        self.vertices_matrix = []
        
        self.file_path = abspath(file_path)
        self.min_len = min_len
        self.max_len = max_len

        self.temp_dir = None
        self.temp_geo = None
        self.temp_unv = None
        self.gmsh_command = None
        
        self.get_temp_paths()
        self.create_geo_file()
        self.get_gmsh_command()
        self.run_gmsh()
        self.read_unv()

    def get_temp_paths(self):
        self.temp_dir = mkdtemp(prefix='fem_mesh')
        self.temp_geo = self.temp_dir + '\\geometry.geo'
        self.temp_unv = self.temp_dir + '\\geometry.unv'
        print(self.temp_unv)

    def create_geo_file(self):
        with open(self.temp_geo, 'w') as file:
            file.write('//Geo file generated by Open Pulse' + '\n')
            file.write('\n')
            file.write(f'Merge "{self.file_path}";\n')
            file.write(f'Mesh.CharacteristicLengthMax = {self.max_len};\n')
            file.write(f'Mesh.CharacteristicLengthMin = {self.min_len};\n')
            file.write('Mesh.Optimize = 1;\n')
            file.write('Mesh.OptimizeNetgen = 0;\n')
            file.write('Mesh.HighOrderOptimize = 0;\n')
            file.write('Mesh.ElementOrder = 1;\n')
            file.write('Mesh.Algorithm = 2;\n')
            file.write('Mesh.Algorithm3D = 1;\n')
            file.write('\n')
            file.write('Geometry.Tolerance = 1e-06;\n')
            file.write('Mesh  3;\n')
            file.write('Coherence Mesh;\n')
            file.write('\n')
            file.write('Mesh.Format = 2;\n')
            file.write('Mesh.SaveAll = 1;\n')
            file.write(f'Save "{self.temp_unv}";\n')

    def get_gmsh_command(self):
        if system() == 'Windows':
            self.gmsh_command = '..\\..\\vendor\\gmsh_windows\\bin\\gmsh.exe'
        elif system() == 'Linux':
            self.gmsh_command = 'gmsh'
            
    def run_gmsh(self):
        commandlist = [self.gmsh_command, '-', self.temp_geo]
        call(commandlist, shell=False, stdout=PIPE, stderr=PIPE)

    def read_unv(self):
        unv = UnvReader(self.temp_unv)
        self.edges = unv.edges
        self.vertices = unv.vertices
        self.vertices_matrix = unv.get_vertice_matrix()
        self.edges_matrix = unv.get_edges_matrix()

